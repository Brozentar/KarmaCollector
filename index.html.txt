<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ball Karma Game</title>
    <style>
        body {
            margin: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            background: linear-gradient(to bottom, #87CEEB, #E0F7FA);
            font-family: Arial, sans-serif;
        }
        #gameContainer {
            position: relative;
            width: 100%;
            max-width: 400px;
            height: 100vh;
            max-height: 600px;
        }
        canvas {
            width: 100%;
            height: 100%;
            border: 2px solid #333;
            border-radius: 10px;
            background: #FFF;
        }
        #dashboard {
            font-size: 18px;
            color: #333;
            padding: 10px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 5px;
            margin-bottom: 5px;
        }
        #startScreen, #gameOverScreen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }
        input, button {
            font-size: 16px;
            padding: 10px;
            margin: 5px;
            border-radius: 5px;
            border: 1px solid #333;
        }
        button {
            background: #4CAF50;
            color: white;
            cursor: pointer;
        }
        button:hover {
            background: #45a049;
        }
        #leaderboard {
            margin-top: 20px;
            width: 100%;
            max-width: 400px;
            background: rgba(255, 255, 255, 0.9);
            padding: 10px;
            border-radius: 5px;
            text-align: center;
        }
        #leaderboard table {
            width: 100%;
            border-collapse: collapse;
        }
        #leaderboard th, #leaderboard td {
            padding: 8px;
            border: 1px solid #333;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <div id="dashboard"></div>
        <canvas id="gameCanvas"></canvas>
        <div id="startScreen">
            <h1>Ball Karma Game</h1>
            <input type="text" id="playerName" placeholder="Your Name">
            <button onclick="startGame()">Start</button>
        </div>
        <div id="gameOverScreen" style="display: none;">
            <h1>Game Over</h1>
            <p>Your score: <span id="finalScore"></span></p>
            <button onclick="restartGame()">Start Again</button>
        </div>
    </div>
    <div id="leaderboard">
        <h2>Leaderboard</h2>
        <table id="leaderboardTable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Score</th>
                </tr>
            </thead>
            <tbody id="leaderboardBody"></tbody>
        </table>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const dashboard = document.getElementById('dashboard');
        const container = document.getElementById('gameContainer');
        const leaderboardBody = document.getElementById('leaderboardBody');

        canvas.width = container.clientWidth;
        canvas.height = container.clientHeight;

        let playerName = '';
        let lives = 3;
        let score = 0;
        let highScore = localStorage.getItem('highScore') ? parseInt(localStorage.getItem('highScore')) : 0;
        let speed = 2;
        let speedTimer = 0;
        let ball = { x: canvas.width / 2, y: canvas.height - 50, radius: 15 }; // Увеличил радиус для лучшей видимости
        let obstacles = [];
        let karma = [];
        let gameRunning = false;
        let leaderboard = JSON.parse(localStorage.getItem('leaderboard')) || [];

        const collectSound = new Audio('https://www.myinstants.com/media/sounds/coin.mp3');
        const crashSound = new Audio('https://www.myinstants.com/media/sounds/crash.mp3');

        // Загрузка изображения игрока
        const playerImg = new Image();
        playerImg.src = 'https://drive.google.com/uc?export=download&id=1BFUfZVFxdhI_WhXBz-Xlx09-sdp_tBVc'; // Прямая ссылка для скачивания

        function startGame() {
            playerName = document.getElementById('playerName').value || 'Player';
            document.getElementById('startScreen').style.display = 'none';
            gameRunning = true;
            spawnObstacles();
            spawnKarma();
            updateLeaderboard();
            gameLoop();
        }

        function restartGame() {
            document.getElementById('gameOverScreen').style.display = 'none';
            lives = 3;
            score = 0;
            speed = 2;
            speedTimer = 0;
            ball.x = canvas.width / 2;
            obstacles = [];
            karma = [];
            gameRunning = true;
            spawnObstacles();
            spawnKarma();
            gameLoop();
        }

        canvas.addEventListener('mousemove', (e) => {
            if (gameRunning) {
                const rect = canvas.getBoundingClientRect();
                ball.x = e.clientX - rect.left;
            }
        });
        canvas.addEventListener('touchmove', (e) => {
            if (gameRunning) {
                e.preventDefault();
                const rect = canvas.getBoundingClientRect();
                ball.x = e.touches[0].clientX - rect.left;
            }
        });

        function spawnObstacles() {
            if (Math.random() < 0.03) {
                obstacles.push({ x: Math.random() * (canvas.width - 50), y: -50, width: 50, height: 50 });
            }
        }

        function spawnKarma() {
            if (Math.random() < 0.07) {
                karma.push({ x: Math.random() * canvas.width, y: -10, radius: 5 });
            }
        }

        function gameLoop() {
            if (!gameRunning) return;

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Рисуем игрока как круг с изображением
            ctx.save();
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.closePath();
            ctx.clip();
            ctx.drawImage(playerImg, ball.x - ball.radius, ball.y - ball.radius, ball.radius * 2, ball.radius * 2);
            ctx.restore();

            // Рисуем препятствия (квадраты)
            obstacles.forEach((obs, index) => {
                obs.y += speed;
                ctx.fillStyle = '#808080';
                ctx.fillRect(obs.x, obs.y, obs.width, obs.height);
                if (obs.y > canvas.height) obstacles.splice(index, 1);
                if (checkCollision(ball, obs)) {
                    lives--;
                    crashSound.play();
                    ball.x = canvas.width / 2;
                    if (lives <= 0) gameOver();
                }
            });

            // Рисуем карму (маленькие кружки)
            karma.forEach((k, index) => {
                k.y += speed;
                ctx.beginPath();
                ctx.arc(k.x, k.y, k.radius, 0, Math.PI * 2);
                ctx.fillStyle = '#FFD700';
                ctx.fill();
                ctx.closePath();
                if (checkCollisionCircle(ball, k)) {
                    score += 1;
                    collectSound.play();
                    karma.splice(index, 1);
                    if (score > highScore) {
                        highScore = score;
                        localStorage.setItem('highScore', highScore);
                    }
                }
            });

            // Увеличение скорости каждые 10 секунд
            speedTimer++;
            if (speedTimer >= 10 * 60) { // 10 секунд при 60 FPS
                speed += 0.1;
                speedTimer = 0;
            }

            dashboard.textContent = `Name: ${playerName} | Lives: ${lives} | Score: ${score} | High Score: ${highScore}`;

            spawnObstacles();
            spawnKarma();
            requestAnimationFrame(gameLoop);
        }

        function checkCollision(circle, rect) {
            const distX = Math.abs(circle.x - (rect.x + rect.width / 2));
            const distY = Math.abs(circle.y - (rect.y + rect.height / 2));
            if (distX > (rect.width / 2 + circle.radius) || distY > (rect.height / 2 + circle.radius)) return false;
            if (distX <= rect.width / 2 || distY <= rect.height / 2) return true;
            const dx = distX - rect.width / 2;
            const dy = distY - rect.height / 2;
            return (dx * dx + dy * dy <= circle.radius * circle.radius);
        }

        function checkCollisionCircle(circle1, circle2) {
            const dx = circle1.x - circle2.x;
            const dy = circle1.y - circle2.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            return distance < (circle1.radius + circle2.radius);
        }

        function gameOver() {
            gameRunning = false;
            document.getElementById('finalScore').textContent = score;
            document.getElementById('gameOverScreen').style.display = 'block';
            updateLeaderboard();
        }

        function updateLeaderboard() {
            leaderboard.push({ name: playerName, score: score });
            leaderboard.sort((a, b) => b.score - a.score);
            leaderboard = leaderboard.slice(0, 5); // Топ-5
            localStorage.setItem('leaderboard', JSON.stringify(leaderboard));
            leaderboardBody.innerHTML = '';
            leaderboard.forEach(entry => {
                const row = document.createElement('tr');
                row.innerHTML = `<td>${entry.name}</td><td>${entry.score}</td>`;
                leaderboardBody.appendChild(row);
            });
        }

        // Ждем загрузки изображения
        playerImg.onload = () => console.log('Player image loaded');
        playerImg.onerror = () => console.log('Error loading player image');
    </script>
</body>
</html>